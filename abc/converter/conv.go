// Code generated by github.com/jmattheis/goverter, DO NOT EDIT.
//go:build !goverter

package converter

import (
	input "g123-jp/talent/app/converter/enum/input"
	output "g123-jp/talent/app/converter/enum/output"
	conv "g123-jp/talent/pkg/util/conv"
	"strconv"
)

func Hello() string {
	return "World!"
}
func Convert(source Input) Output {
	var converterOutput Output
	converterOutput.Name = source.Name
	converterOutput.URL = ParseHTTPS(source.URL)
	converterOutput.Age = source.Nested.AgeInYears
	converterOutput.FullName = GetFullName(source)
	converterOutput.DefaultValue = DefaultVal()
	converterOutput.StdValue = strconv.Itoa(source.StdValue)
	converterOutput.Firends = ExtractFirends(source.Firends)
	converterOutput.Nested = ConvertNested(source.Nested)
	converterOutput.Reader = ContentToReader(source.Content)
	return converterOutput
}
func ConvertEnum(source input.Color) (output.Color, error) {
	var outputColor output.Color
	switch source {
	case input.Green:
		outputColor = output.Green
	case input.Red:
		outputColor = output.Red
	case input.Yell:
		outputColor = output.Yellow
	default:
		outputColor = output.Unknown
	}
	return outputColor, nil
}
func ConvertFlatPerson(source *Person) *FlatPerson {
	converterFlatPerson := NewFlatPerson()
	pConverterFlatPerson := &converterFlatPerson
	if source != nil {
		var converterFlatPerson2 FlatPerson
		converterFlatPerson2.Name = (*source).Name
		var pString *string
		if (*source).Address != nil {
			pString = &(*source).Address.Street
		}
		converterFlatPerson2.Street = conv.ConvertStringPointerToString(pString)
		var pString2 *string
		if (*source).Address != nil {
			pString2 = &(*source).Address.ZipCode
		}
		converterFlatPerson2.ZipCode = conv.ConvertStringPointerToString(pString2)
		pConverterFlatPerson = &converterFlatPerson2
	}
	return pConverterFlatPerson
}
func ConvertItems(source []Input) []Output {
	var converterOutputList []Output
	if source != nil {
		converterOutputList = make([]Output, len(source))
		for i := 0; i < len(source); i++ {
			converterOutputList[i] = Convert(source[i])
		}
	}
	return converterOutputList
}
func ConvertNested(source InputNested) OutputNested {
	var converterOutputNested OutputNested
	converterOutputNested.OutputName = source.InputName
	converterOutputNested.AgeInYears = source.AgeInYears
	return converterOutputNested
}
func ConvertPerson(source FlatPerson) Person {
	var converterPerson Person
	converterPerson.Name = source.Name
	converterPerson.Address = converterFlatPersonToPConverterAddress(source)
	return converterPerson
}
func ConvertPost(source PostInput, context int) PostOutput {
	var converterPostOutput PostOutput
	converterPostOutput.ID = source.ID
	converterPostOutput.Body = source.Body
	converterPostOutput.Able = IsAble(source.ID, context)
	return converterPostOutput
}
func converterFlatPersonToPConverterAddress(source FlatPerson) *Address {
	var converterAddress Address
	converterAddress.Street = source.Street
	converterAddress.ZipCode = source.ZipCode
	return &converterAddress
}
